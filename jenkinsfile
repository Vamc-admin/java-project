pipeline{
    
    agent any

    environment{
        APP_NAME = "java-app"
        RELEASE = "1.0.0"
        DOCKER_USER = "vamc470"
        DOCKER_PASS = "dockerhub"
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {

        stage('clean worspace'){

            steps{

                script {
                    cleanWs()
                }
            }
        }
        stage('git checkout'){

            steps{
                git branch: 'master', credentialsId: 'github', url: 'https://github.com/Vamc-admin/java-project.git'
            }
        }
        stage('compile'){
            steps{
                script{
                    sh 'mvn compile'
                }
            }
        }
        stage('junit test'){
            steps{
                sh 'mvn surefire:test'
            }
        }        
        stage('build'){
            steps{

                sh 'mvn jar:jar'
            }
        }
        stage('sonarqubequailty check'){
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'sonarqube'){
                        sh 'mvn compile sonar:sonar'
                  }
                }
            }
        }
        stage('Quailty gate'){
            steps{
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
                }
            }
        }
        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('',DOCKER_PASS) {
                        docker_image = docker.build "${IMAGE_NAME}"
                    }

                        docker.withRegistry('',DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }
         stage("Trivy Scan") {
           steps {
               script {
	            sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image vamc470/java-app:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
               }
           }
       }
        stage ('Cleanup Artifacts') {
           steps {
               script {
                    sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
               }
          }
       }
    }
}